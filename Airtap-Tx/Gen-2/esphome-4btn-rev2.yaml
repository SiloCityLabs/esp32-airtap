# Description: ESPHome configuration for the AirTap T-Series Ventilation System 4 Button
# https://github.com/SiloCityLabs/ac-infinity-esp32/


# These substitutions allow the end user to override certain values
substitutions:
  name: "airtap-esp32-4btn"
  friendly_name: "AirTap Vent"

  # If you deactivate this it also deactivates the improv_serial option. See here for more info: https://esphome.io/components/improv_serial
  log_level: "INFO"    

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  min_version: 2025.6.0 #https://developers.esphome.io/blog/2025/06/18/sunsetting-support-for-idf-4x/

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: silocitylabs.airtap-esp32-4btn-rev2
    version: "1.3.1"

esp32:
  board: seeed_xiao_esp32c6
  framework:
    type: esp-idf #https://developers.esphome.io/blog/2025/06/18/sunsetting-support-for-idf-4x/

# Enable logging
logger:
  level: "${log_level}"

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  id: airtap_ota
  platform: esphome

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://SiloCityLabs/ac-infinity-esp32/Airtap-Tx/Gen-2/esphome-4btn-rev2.yaml@main
  import_full_config: true

wifi:
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning
improv_serial:

i2c:
  id: airtap_i2c
  sda: GPIO22
  scl: GPIO23
  scan: True
  frequency: 400kHz

globals:
  - id: fan_speed
    type: int
    restore_value: yes
    initial_value: '0'
  - id: panel_disabled
    type: bool
    restore_value: yes
    initial_value: 'false'

switch:
  - platform: template
    name: "Disable Panel Buttons"
    id: panel_disable_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:lock
    lambda: |-
      return id(panel_disabled);
    turn_on_action:
      - lambda: |-
          id(panel_disabled) = true;
          id(panel_disable_switch).publish_state(true);
    turn_off_action:
      - lambda: |-
          id(panel_disabled) = false;
          id(panel_disable_switch).publish_state(false);

button:
  - platform: restart
    id: restart_button
    icon: mdi:power-cycle
    name: "ESP Reboot"

number:
  - platform: template
    name: "Fan Speed"
    id: fan_speed_number
    min_value: 0
    max_value: 10
    step: 1
    restore_value: true
    set_action:
      - lambda: |-
          id(fan_speed) = (int)(x);
          id(fan_speed_number).publish_state(x);

sensor:
  - platform: ntc
    sensor: temp_resistance_reading
    calibration:      
      #Inversed for PTC
      - 3.389kOhm -> 0°C
      - 10.0kOhm -> 25°C
      - 27.219kOhm -> 50°C
      # - 10.0kOhm -> 28.88°C
      # # - 10.86kOhm -> 23.55°C
      # - 13kOhm -> 16.94°C
      # - 17kOhm -> 9.44°C

    name: "AC Infinity Temperature"
    id: temp_sensor
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    icon: "mdi:thermometer"

  - platform: resistance
    id: temp_resistance_reading
    sensor: adc_sensor
    configuration: DOWNSTREAM
    resistor: 10kOhm

  - platform: adc
    pin: GPIO2
    id: adc_sensor
    attenuation: 12db

  - platform: wifi_signal
    id: esp_wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

output:
  - platform: ledc
    pin: 
      number: GPIO0
      ignore_strapping_warning: true
    id: pwm_output_1
    frequency: 1000 Hz
    # power_supply: fan_speed

display:
  - platform: ssd1306_i2c
    id: display_1306
    model: "SSD1306 128x64"
    address: 0x3C
    # Celcius
    # lambda: |-
    #   it.printf(1, 0, id(myfont), "Airtap T-Series");
    #   it.printf(0, 14, id(myfont), "Temp: %.1f°C", id(temp_sensor).state);
    #   it.printf(0, 28, id(myfont), "Fan Speed: %d", id(fan_speed));
    # Fahrenheit
    lambda: |-
      it.printf(1, 0, id(myfont), "Airtap T-Series");
      float temp_f = (id(temp_sensor).state * 9.0 / 5.0) + 32.0;
      it.printf(0, 14, id(myfont), "Temp: %.1f°F", temp_f);
      it.printf(0, 28, id(myfont), "Fan Speed: %d", id(fan_speed));

font:
  - file: "gfonts://Roboto"
    id: myfont
    size: 12

binary_sensor:
  - platform: gpio
    pin: GPIO18
    name: "Mode Button"
    id: button_mode
    on_press:
      then:
        - lambda: |-
            if (!id(panel_disabled)) {
              if (id(fan_speed) == 0) {
                id(fan_speed) = 10;
              } else {
                id(fan_speed) = 0;
              }
              id(fan_speed_number).publish_state(id(fan_speed)); // Publish updated state
            }

  - platform: gpio
    pin: GPIO17
    name: "Up Button"
    id: button_up
    on_press:
      then:
        - lambda: |-
            if (!id(panel_disabled)) {
              if (id(fan_speed) < 10){ 
                id(fan_speed) += 1;
                id(fan_speed_number).publish_state(id(fan_speed)); // Publish updated state
              }
            }

  - platform: gpio
    pin: 
      number: GPIO19
      ignore_strapping_warning: true
    name: "Down Button"
    id: button_down
    on_press:
      then:
        - lambda: |-
            if (!id(panel_disabled)) {
              if (id(fan_speed) > 0){ 
                id(fan_speed) -= 1;
                id(fan_speed_number).publish_state(id(fan_speed)); // Publish updated state
              }
            }
  
  - platform: gpio
    pin: 
      number: GPIO20
      ignore_strapping_warning: true
    name: "Toggle Button"
    id: button_toggle
    on_press:
      then:
        - lambda: |-
            if (!id(panel_disabled)) {
              if (id(fan_speed) == 0) {
                id(fan_speed) = 10;
              } else {
                id(fan_speed) = 0;
              }
              id(fan_speed_number).publish_state(id(fan_speed)); // Publish updated state
            }

light:
  - platform: monochromatic
    output: pwm_output_1
    name: "Fan 1 Speed"
    id: fan_1
    internal: true  # Hide this from Home Assistant

interval:
  - interval: 1s
    then:
      - light.turn_on:
          id: fan_1
          brightness: !lambda |-
            if (id(fan_speed) == 0) {
              return 0.0;
            } else if (id(fan_speed) == 1) {
              return 0.38;  // Minimum value to start the fan
            } else {
              return (id(fan_speed) + 4) / 14.0;
            }
